package goldilocks

import (
	"bytes"
	"testing"
)

func TestEdPublicKeyToX448(t *testing.T) {
	// b93a28627cfa29fedb03c21aac0faa1ea0ba84c10cefa07c938f2e0adbf996f02c8d00e39695dfb6a0636c8bcb21645b06a869dfbbb489ef00
	edKey := PublicKey{
		0xb9, 0x3a, 0x28, 0x62, 0x7c, 0xfa, 0x29, 0xfe,
		0xdb, 0x03, 0xc2, 0x1a, 0xac, 0x0f, 0xaa, 0x1e,
		0xa0, 0xba, 0x84, 0xc1, 0x0c, 0xef, 0xa0, 0x7c,
		0x93, 0x8f, 0x2e, 0x0a, 0xdb, 0xf9, 0x96, 0xf0,
		0x2c, 0x8d, 0x00, 0xe3, 0x96, 0x95, 0xdf, 0xb6,
		0xa0, 0x63, 0x6c, 0x8b, 0xcb, 0x21, 0x64, 0x5b,
		0x06, 0xa8, 0x69, 0xdf, 0xbb, 0xb4, 0x89, 0xef,
		0x00,
	}

	// 163af30230e62cbf36fd8f4713f2204d78fa8f94f79adfe4f49ed1075d12b3a725a5e5c0564faa6445900b4d166b89b76f2db5c374411129
	x448Key := [56]byte{
		0x16, 0x3a, 0xf3, 0x02, 0x30, 0xe6, 0x2c, 0xbf,
		0x36, 0xfd, 0x8f, 0x47, 0x13, 0xf2, 0x20, 0x4d,
		0x78, 0xfa, 0x8f, 0x94, 0xf7, 0x9a, 0xdf, 0xe4,
		0xf4, 0x9e, 0xd1, 0x07, 0x5d, 0x12, 0xb3, 0xa7,
		0x25, 0xa5, 0xe5, 0xc0, 0x56, 0x4f, 0xaa, 0x64,
		0x45, 0x90, 0x0b, 0x4d, 0x16, 0x6b, 0x89, 0xb7,
		0x6f, 0x2d, 0xb5, 0xc3, 0x74, 0x41, 0x11, 0x29,
	}
	generatedKey := EdPublicKeyToX448(edKey)

	if bytes.Compare(x448Key[:], generatedKey[:]) != 0 {
		t.Errorf("converted x448 key must be %x, but it is %x", generatedKey, x448Key)
	}
}

func TestEdPrivateKeyToX448(t *testing.T) {
	// b93a28627cfa29fedb03c21aac0faa1ea0ba84c10cefa07c938f2e0adbf996f02c8d00e39695dfb6a0636c8bcb21645b06a869dfbbb489ef00
	edKey := PrivateKey{
		0xb9, 0x3a, 0x28, 0x62, 0x7c, 0xfa, 0x29, 0xfe,
		0xdb, 0x03, 0xc2, 0x1a, 0xac, 0x0f, 0xaa, 0x1e,
		0xa0, 0xba, 0x84, 0xc1, 0x0c, 0xef, 0xa0, 0x7c,
		0x93, 0x8f, 0x2e, 0x0a, 0xdb, 0xf9, 0x96, 0xf0,
		0x2c, 0x8d, 0x00, 0xe3, 0x96, 0x95, 0xdf, 0xb6,
		0xa0, 0x63, 0x6c, 0x8b, 0xcb, 0x21, 0x64, 0x5b,
		0x06, 0xa8, 0x69, 0xdf, 0xbb, 0xb4, 0x89, 0xef,
		0x00,
	}

	// 74a4d56b9ca4bb819778d5b089ef89428bbe768825c83264e97cfba7c0a5f3c33d6ac807e3a568d72a605283f89b8afa52b06323704d9278,
	x448Key := [56]byte{
		0x74, 0xa4, 0xd5, 0x6b, 0x9c, 0xa4, 0xbb, 0x81,
		0x97, 0x78, 0xd5, 0xb0, 0x89, 0xef, 0x89, 0x42,
		0x8b, 0xbe, 0x76, 0x88, 0x25, 0xc8, 0x32, 0x64,
		0xe9, 0x7c, 0xfb, 0xa7, 0xc0, 0xa5, 0xf3, 0xc3,
		0x3d, 0x6a, 0xc8, 0x07, 0xe3, 0xa5, 0x68, 0xd7,
		0x2a, 0x60, 0x52, 0x83, 0xf8, 0x9b, 0x8a, 0xfa,
		0x52, 0xb0, 0x63, 0x23, 0x70, 0x4d, 0x92, 0x78,
	}
	generatedKey := EdPrivateKeyToX448(edKey)

	if bytes.Compare(x448Key[:], generatedKey[:]) != 0 {
		t.Errorf("converted x448 key must be %x, but it is %x", generatedKey, x448Key)
	}
}

func TestEdPrivateKeyToPublic(t *testing.T) {
	// 39c69dcda6ee7c273b8f6b4c853c2a7a1e1aa22968e75ae6c357c01cb4c0ed939c040057a2c833cf9c8a5ebd66b165826ce1ea3c7af8bdac3a
	privKey := PrivateKey{
		0x39, 0xc6, 0x9d, 0xcd, 0xa6, 0xee, 0x7c, 0x27, 
		0x3b, 0x8f, 0x6b, 0x4c, 0x85, 0x3c, 0x2a, 0x7a, 
		0x1e, 0x1a, 0xa2, 0x29, 0x68, 0xe7, 0x5a, 0xe6, 
		0xc3, 0x57, 0xc0, 0x1c, 0xb4, 0xc0, 0xed, 0x93, 
		0x9c, 0x04, 0x00, 0x57, 0xa2, 0xc8, 0x33, 0xcf, 
		0x9c, 0x8a, 0x5e, 0xbd, 0x66, 0xb1, 0x65, 0x82, 
		0x6c, 0xe1, 0xea, 0x3c, 0x7a, 0xf8, 0xbd, 0xac, 
		0x3a,
	}


	// c072444f7f689ab9ce58a8e244e2a12ee8fbac64cc3213e2677bbcf4207e55eec4dac1d79d855f6629bf45fd23e1d6c80284952a1bfd764800
	pubKey := PublicKey{
		0xc0, 0x72, 0x44, 0x4f, 0x7f, 0x68, 0x9a, 0xb9, 
		0xce, 0x58, 0xa8, 0xe2, 0x44, 0xe2, 0xa1, 0x2e, 
		0xe8, 0xfb, 0xac, 0x64, 0xcc, 0x32, 0x13, 0xe2, 
		0x67, 0x7b, 0xbc, 0xf4, 0x20, 0x7e, 0x55, 0xee, 
		0xc4, 0xda, 0xc1, 0xd7, 0x9d, 0x85, 0x5f, 0x66, 
		0x29, 0xbf, 0x45, 0xfd, 0x23, 0xe1, 0xd6, 0xc8, 
		0x02, 0x84, 0x95, 0x2a, 0x1b, 0xfd, 0x76, 0x48, 
		0x00,
	}
	generatedKey := Ed448DerivePublicKey(privKey)

	if bytes.Compare(pubKey[:], generatedKey[:]) != 0 {
		t.Errorf("Public key must be %x, but it is %x", generatedKey, pubKey)
	}
}

func TestPrivateKeyToSecret(t *testing.T) {
	// 39c69dcda6ee7c273b8f6b4c853c2a7a1e1aa22968e75ae6c357c01cb4c0ed939c040057a2c833cf9c8a5ebd66b165826ce1ea3c7af8bdac3a
	privKey := PrivateKey{
		0x39, 0xc6, 0x9d, 0xcd, 0xa6, 0xee, 0x7c, 0x27, 
		0x3b, 0x8f, 0x6b, 0x4c, 0x85, 0x3c, 0x2a, 0x7a, 
		0x1e, 0x1a, 0xa2, 0x29, 0x68, 0xe7, 0x5a, 0xe6, 
		0xc3, 0x57, 0xc0, 0x1c, 0xb4, 0xc0, 0xed, 0x93, 
		0x9c, 0x04, 0x00, 0x57, 0xa2, 0xc8, 0x33, 0xcf, 
		0x9c, 0x8a, 0x5e, 0xbd, 0x66, 0xb1, 0x65, 0x82, 
		0x6c, 0xe1, 0xea, 0x3c, 0x7a, 0xf8, 0xbd, 0xac, 
		0x3a,
	}
	
	// 5432fc5ef866a70328889d0d33136519b6583c3e2f3e30b50e111e58695a5bead6fed6c451fa44f531b031e8ff07fdf7d936e6a2b39cfda400
	secKey := SecretKey{
		0x54, 0x32, 0xfc, 0x5e, 0xf8, 0x66, 0xa7, 0x03, 
		0x28, 0x88, 0x9d, 0x0d, 0x33, 0x13, 0x65, 0x19, 
		0xb6, 0x58, 0x3c, 0x3e, 0x2f, 0x3e, 0x30, 0xb5, 
		0x0e, 0x11, 0x1e, 0x58, 0x69, 0x5a, 0x5b, 0xea, 
		0xd6, 0xfe, 0xd6, 0xc4, 0x51, 0xfa, 0x44, 0xf5, 
		0x31, 0xb0, 0x31, 0xe8, 0xff, 0x07, 0xfd, 0xf7, 
		0xd9, 0x36, 0xe6, 0xa2, 0xb3, 0x9c, 0xfd, 0xa4, 
		0x00, 
	}
	generatedKey := Ed448PrivateKeyToSecret(privKey)
	
	if bytes.Compare(secKey[:], generatedKey[:]) != 0 {
		t.Errorf("Secret key must be %x, but it is %x", generatedKey, secKey)
	}
}

func TestEd448DerivePublicKeyFromSecret(t *testing.T) {
	// 5432fc5ef866a70328889d0d33136519b6583c3e2f3e30b50e111e58695a5bead6fed6c451fa44f531b031e8ff07fdf7d936e6a2b39cfda400
	secKey := SecretKey{
		0x54, 0x32, 0xfc, 0x5e, 0xf8, 0x66, 0xa7, 0x03, 
		0x28, 0x88, 0x9d, 0x0d, 0x33, 0x13, 0x65, 0x19, 
		0xb6, 0x58, 0x3c, 0x3e, 0x2f, 0x3e, 0x30, 0xb5, 
		0x0e, 0x11, 0x1e, 0x58, 0x69, 0x5a, 0x5b, 0xea, 
		0xd6, 0xfe, 0xd6, 0xc4, 0x51, 0xfa, 0x44, 0xf5, 
		0x31, 0xb0, 0x31, 0xe8, 0xff, 0x07, 0xfd, 0xf7, 
		0xd9, 0x36, 0xe6, 0xa2, 0xb3, 0x9c, 0xfd, 0xa4, 
		0x00, 
	}
	
	// c072444f7f689ab9ce58a8e244e2a12ee8fbac64cc3213e2677bbcf4207e55eec4dac1d79d855f6629bf45fd23e1d6c80284952a1bfd764800
	pubKey := PublicKey{
		0xc0, 0x72, 0x44, 0x4f, 0x7f, 0x68, 0x9a, 0xb9, 
		0xce, 0x58, 0xa8, 0xe2, 0x44, 0xe2, 0xa1, 0x2e, 
		0xe8, 0xfb, 0xac, 0x64, 0xcc, 0x32, 0x13, 0xe2, 
		0x67, 0x7b, 0xbc, 0xf4, 0x20, 0x7e, 0x55, 0xee, 
		0xc4, 0xda, 0xc1, 0xd7, 0x9d, 0x85, 0x5f, 0x66, 
		0x29, 0xbf, 0x45, 0xfd, 0x23, 0xe1, 0xd6, 0xc8, 
		0x02, 0x84, 0x95, 0x2a, 0x1b, 0xfd, 0x76, 0x48, 
		0x00,
	}
	generatedKey := Ed448DerivePublicKeyFromSecret(secKey)
	
	if bytes.Compare(pubKey[:], generatedKey[:]) != 0 {
		t.Errorf("Public key must be %x, but it is %x", generatedKey, secKey)
	}
}

func TestAddTwoPublicKeys(t *testing.T) {
	// 5475efbfc0fa155f3fd80a8c183260eef996532fd084899e32df9cb8db9eb34410d2ea0d4f8b273fbd79c3276b50b70fea40732ad88f45de00
	pubKey1 := PublicKey{
		0x54, 0x75, 0xef, 0xbf, 0xc0, 0xfa, 0x15, 0x5f, 
		0x3f, 0xd8, 0x0a, 0x8c, 0x18, 0x32, 0x60, 0xee, 
		0xf9, 0x96, 0x53, 0x2f, 0xd0, 0x84, 0x89, 0x9e, 
		0x32, 0xdf, 0x9c, 0xb8, 0xdb, 0x9e, 0xb3, 0x44, 
		0x10, 0xd2, 0xea, 0x0d, 0x4f, 0x8b, 0x27, 0x3f, 
		0xbd, 0x79, 0xc3, 0x27, 0x6b, 0x50, 0xb7, 0x0f, 
		0xea, 0x40, 0x73, 0x2a, 0xd8, 0x8f, 0x45, 0xde, 
		0x0, 
	}
	
	// d666091b1b3836d082d349e66521878cf7afc734329d5d132d8ebd06bebf6514aaad5794dbafed3fd6aa1c5d59d5db914e8460041ff3db6280
	pubKey2 := PublicKey{
		0xd6, 0x66, 0x09, 0x1b, 0x1b, 0x38, 0x36, 0xd0, 
		0x82, 0xd3, 0x49, 0xe6, 0x65, 0x21, 0x87, 0x8c, 
		0xf7, 0xaf, 0xc7, 0x34, 0x32, 0x9d, 0x5d, 0x13, 
		0x2d, 0x8e, 0xbd, 0x06, 0xbe, 0xbf, 0x65, 0x14, 
		0xaa, 0xad, 0x57, 0x94, 0xdb, 0xaf, 0xed, 0x3f, 
		0xd6, 0xaa, 0x1c, 0x5d, 0x59, 0xd5, 0xdb, 0x91, 
		0x4e, 0x84, 0x60, 0x04, 0x1f, 0xf3, 0xdb, 0x62, 
		0x80, 
	}
	
	// 6af04e1137833cbf82878fcdcd8310851fe582320690990a7497de63389311588d4c0d4d6fce79d07958824e54ef11fabd23b815c81e79ea80
	pubKey := PublicKey{
		0x6a, 0xf0, 0x4e, 0x11, 0x37, 0x83, 0x3c, 0xbf, 
		0x82, 0x87, 0x8f, 0xcd, 0xcd, 0x83, 0x10, 0x85, 
		0x1f, 0xe5, 0x82, 0x32, 0x06, 0x90, 0x99, 0x0a, 
		0x74, 0x97, 0xde, 0x63, 0x38, 0x93, 0x11, 0x58, 
		0x8d, 0x4c, 0x0d, 0x4d, 0x6f, 0xce, 0x79, 0xd0, 
		0x79, 0x58, 0x82, 0x4e, 0x54, 0xef, 0x11, 0xfa, 
		0xbd, 0x23, 0xb8, 0x15, 0xc8, 0x1e, 0x79, 0xea, 
		0x80, 
	}
	
	generatedKey := Ed448AddTwoPublicKeys(pubKey1, pubKey2)
	
	if bytes.Compare(pubKey[:], generatedKey[:]) != 0 {
		t.Errorf("Public key must be %x, but it is %x", generatedKey, pubKey)
	}
}

func TestSignature(t *testing.T) {
	// 8c7ca9e573e46e7b81edcbe0eb26fc095ea2adaf6d4de272e4d988acb53c8eb97d3e7ba98215bc2a7b3701a2164cba3329588bb36aa52ca0de
	privKey := PrivateKey{
		0x8c, 0x7c, 0xa9, 0xe5, 0x73, 0xe4, 0x6e, 0x7b, 
		0x81, 0xed, 0xcb, 0xe0, 0xeb, 0x26, 0xfc, 0x09, 
		0x5e, 0xa2, 0xad, 0xaf, 0x6d, 0x4d, 0xe2, 0x72, 
		0xe4, 0xd9, 0x88, 0xac, 0xb5, 0x3c, 0x8e, 0xb9, 
		0x7d, 0x3e, 0x7b, 0xa9, 0x82, 0x15, 0xbc, 0x2a, 
		0x7b, 0x37, 0x01, 0xa2, 0x16, 0x4c, 0xba, 0x33, 
		0x29, 0x58, 0x8b, 0xb3, 0x6a, 0xa5, 0x2c, 0xa0, 
		0xde,
	}

	// 74a4d56b9ca4bb819778d5b089ef89428bbe768825c83264e97cfba7c0a5f3c33d6ac807e3a568d72a605283f89b8afa52b06323704d9278,
	signature := [114]byte{
		0x83, 0xf6, 0x9d, 0xa4, 0x7d, 0x8b, 0x74, 0x09, 
		0xa7, 0x4e, 0xbe, 0x8a, 0x64, 0x6e, 0x4d, 0x90, 
		0x98, 0x84, 0x18, 0x42, 0x26, 0x93, 0xf8, 0xfc, 
		0x07, 0x14, 0xc2, 0xef, 0x22, 0x2f, 0x34, 0x95, 
		0x74, 0x87, 0x6e, 0x81, 0x88, 0x9c, 0xdd, 0xc9, 
		0xee, 0x2f, 0xaf, 0x8e, 0x5e, 0x00, 0x2d, 0x84, 
		0xd3, 0x82, 0xa1, 0xec, 0x11, 0x97, 0x8d, 0xe9, 
		0x80, 0x8d, 0xdd, 0xea, 0xea, 0x29, 0x87, 0x9a, 
		0xee, 0xdd, 0x66, 0x76, 0x44, 0xc4, 0x86, 0x8a, 
		0x85, 0x7e, 0x7f, 0x55, 0xa9, 0x61, 0xc1, 0x0e, 
		0x26, 0x3e, 0xd4, 0x89, 0xf8, 0xe3, 0xa9, 0x39, 
		0x22, 0x80, 0xea, 0xba, 0x90, 0xda, 0x4d, 0xb9, 
		0x8a, 0x81, 0x5a, 0x24, 0xab, 0x69, 0x69, 0x76, 
		0xd9, 0xcc, 0x45, 0xf4, 0x91, 0xf0, 0x51, 0x6b, 
		0x34, 0x00,
	}
	fox := []byte("The quick brown fox jumps over the lazy dog")
	pubKey := Ed448DerivePublicKey(privKey)
	generatedKey := Ed448Sign(privKey, pubKey, fox, []byte{1}, true)

	if bytes.Compare(signature[:], generatedKey[:]) != 0 {
		t.Errorf("Signature must be %x, but it is %x", generatedKey, signature)
	}
}

func TestSignatureWithSecretKey(t *testing.T) {
	// e01d8a1b459fd5d3954adc91eb7218d899b3e3b9c7a67f958f9f6bb914c3f93559fe8ab6180325aa277262a23928c69ca6542c0edc6313cf00

	secKey := SecretKey{
		0xe0, 0x1d, 0x8a, 0x1b, 0x45, 0x9f, 0xd5, 0xd3, 
		0x95, 0x4a, 0xdc, 0x91, 0xeb, 0x72, 0x18, 0xd8, 
		0x99, 0xb3, 0xe3, 0xb9, 0xc7, 0xa6, 0x7f, 0x95, 
		0x8f, 0x9f, 0x6b, 0xb9, 0x14, 0xc3, 0xf9, 0x35, 
		0x59, 0xfe, 0x8a, 0xb6, 0x18, 0x03, 0x25, 0xaa, 
		0x27, 0x72, 0x62, 0xa2, 0x39, 0x28, 0xc6, 0x9c, 
		0xa6, 0x54, 0x2c, 0x0e, 0xdc, 0x63, 0x13, 0xcf, 
		0x00,
	}
	
	// ecdd4a134e038e8262891bfeb44db4974c532e9bb12e59957b41d796d00445340270099f5d52987c37455e938b5554653602241ac341b81a60
	nonce := SecretKey{
		0xec, 0xdd, 0x4a, 0x13, 0x4e, 0x03, 0x8e, 0x82, 
		0x62, 0x89, 0x1b, 0xfe, 0xb4, 0x4d, 0xb4, 0x97, 
		0x4c, 0x53, 0x2e, 0x9b, 0xb1, 0x2e, 0x59, 0x95, 
		0x7b, 0x41, 0xd7, 0x96, 0xd0, 0x04, 0x45, 0x34, 
		0x02, 0x70, 0x09, 0x9f, 0x5d, 0x52, 0x98, 0x7c, 
		0x37, 0x45, 0x5e, 0x93, 0x8b, 0x55, 0x54, 0x65, 
		0x36, 0x02, 0x24, 0x1a, 0xc3, 0x41, 0xb8, 0x1a, 
		0x60, 
	}

	// 74a4d56b9ca4bb819778d5b089ef89428bbe768825c83264e97cfba7c0a5f3c33d6ac807e3a568d72a605283f89b8afa52b06323704d9278,
	signature := [114]byte{
		0x83, 0xf6, 0x9d, 0xa4, 0x7d, 0x8b, 0x74, 0x09, 
		0xa7, 0x4e, 0xbe, 0x8a, 0x64, 0x6e, 0x4d, 0x90, 
		0x98, 0x84, 0x18, 0x42, 0x26, 0x93, 0xf8, 0xfc, 
		0x07, 0x14, 0xc2, 0xef, 0x22, 0x2f, 0x34, 0x95, 
		0x74, 0x87, 0x6e, 0x81, 0x88, 0x9c, 0xdd, 0xc9, 
		0xee, 0x2f, 0xaf, 0x8e, 0x5e, 0x00, 0x2d, 0x84, 
		0xd3, 0x82, 0xa1, 0xec, 0x11, 0x97, 0x8d, 0xe9, 
		0x80, 0x8d, 0xdd, 0xea, 0xea, 0x29, 0x87, 0x9a, 
		0xee, 0xdd, 0x66, 0x76, 0x44, 0xc4, 0x86, 0x8a, 
		0x85, 0x7e, 0x7f, 0x55, 0xa9, 0x61, 0xc1, 0x0e, 
		0x26, 0x3e, 0xd4, 0x89, 0xf8, 0xe3, 0xa9, 0x39, 
		0x22, 0x80, 0xea, 0xba, 0x90, 0xda, 0x4d, 0xb9, 
		0x8a, 0x81, 0x5a, 0x24, 0xab, 0x69, 0x69, 0x76, 
		0xd9, 0xcc, 0x45, 0xf4, 0x91, 0xf0, 0x51, 0x6b, 
		0x34, 0x00,
	}
	fox := []byte("The quick brown fox jumps over the lazy dog")
	pubKey := Ed448DerivePublicKeyFromSecret(secKey)
	generatedKey := Ed448SignWithSecretAndNonce(secKey, nonce, pubKey, fox, []byte{1}, true)

	if bytes.Compare(signature[:], generatedKey[:]) != 0 {
		t.Errorf("Signature must be %x, but it is %x", generatedKey, signature)
	}
}

func TestSignVerify(t *testing.T) {
	priv := PrivateKey{
		0xb9, 0x3a, 0x28, 0x62, 0x7c, 0xfa, 0x29, 0xfe,
		0xdb, 0x03, 0xc2, 0x1a, 0xac, 0x0f, 0xaa, 0x1e,
		0xa0, 0xba, 0x84, 0xc1, 0x0c, 0xef, 0xa0, 0x7c,
		0x93, 0x8f, 0x2e, 0x0a, 0xdb, 0xf9, 0x96, 0xf0,
		0x2c, 0x8d, 0x00, 0xe3, 0x96, 0x95, 0xdf, 0xb6,
		0xa0, 0x63, 0x6c, 0x8b, 0xcb, 0x21, 0x64, 0x5b,
		0x06, 0xa8, 0x69, 0xdf, 0xbb, 0xb4, 0x89, 0xef,
		0x00,
	}

	pub := Ed448DerivePublicKey(priv)
	sig := Ed448Sign(priv, pub, []byte{1}, []byte{1}, true)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{1}, false) {
		t.Errorf("wrong signature verification")
	}

	sig = Ed448Sign(priv, pub, []byte{1}, []byte{1}, false)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{1}, true) {
		t.Errorf("wrong signature verification")
	}

	sig = Ed448Sign(priv, pub, []byte{2}, []byte{1}, false)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{1}, false) {
		t.Errorf("wrong signature verification")
	}

	sig = Ed448Sign(priv, pub, []byte{1}, []byte{2}, false)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{1}, false) {
		t.Errorf("wrong signature verification")
	}

	sig = Ed448Sign(priv, pub, []byte{2}, []byte{1}, false)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{2}, false) {
		t.Errorf("wrong signature verification")
	}

	sig = Ed448Sign(priv, pub, []byte{2}, []byte{1}, false)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{1}, false) {
		t.Errorf("wrong signature verification")
	}

	sig = Ed448Sign(priv, pub, []byte{2}, []byte{}, true)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{}, true) {
		t.Errorf("wrong signature verification")
	}

	pubb := pub
	pubb[0] = 0x0
	sig = Ed448Sign(priv, pubb, []byte{1}, []byte{1}, false)
	if Ed448Verify(pubb, sig[:], []byte{1}, []byte{1}, false) {
		t.Errorf("wrong signature verification")
	}

	sigg := Ed448Sign(priv, pub, []byte{1}, []byte{1}, true)
	sigg[0] = 0x0
	if Ed448Verify(pub, sigg[:], []byte{1}, []byte{1}, true) {
		t.Errorf("wrong signature verification")
	}

	privv := priv
	privv[0] = 0x0
	sig = Ed448Sign(privv, pub, []byte{1}, []byte{1}, true)
	if Ed448Verify(pub, sig[:], []byte{1}, []byte{1}, true) {
		t.Errorf("wrong signature verification")
	}
}
